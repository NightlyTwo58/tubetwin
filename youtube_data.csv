video_id,title,views,comment_author,comment_text,comment_likes
L1QlVr686Bg,What actually prints to the console and why? Go!,5356,@GoogleDevelopers,"Answer: The output is: [1, NaN, NaN]
Here’s why: Array.map passes three arguments to the callback: the current element, the index, and the whole array. parseInt takes two arguments: the string to parse and the radix (number base). When you write [""1"", ""2"", ""3""].map(parseInt), the index gets passed as the radix.
Fix: Use an arrow function so you only pass the string.
const result = [""1"", ""2"", ""3""].map(str => parseInt(str));
or even better, use Number:
const result = [""1"", ""2"", ""3""].map(Number); // [1, 2, 3]",1
L1QlVr686Bg,What actually prints to the console and why? Go!,5356,@GoogleDevelopers,Hint: Remember that Array.map passes more than one argument into the callback. How many parameters does parseInt expect?,3
L1QlVr686Bg,What actually prints to the console and why? Go!,5356,@CodeCecil,"TLDR; [""1"", ""2"", ""3""].map(parseInt) == [""1"", ""2"", ""3""].map((num, idx) => parseInt(num, idx));

The radix provided is the index of the string in the array being iterated over. So ""2"" with a radix of 1 is NaN because 2 is not a valid integer in a base 1 number system. ""1"" is valid because the radix is set to 0 which causes parseInt to chose the best radix based on the string's value. Since there is not leading whitespace, sign or anything else, it is defaulted to base 10 so that is why ""1"" -> 1",3
L1QlVr686Bg,What actually prints to the console and why? Go!,5356,@siddharth_shankar91,This is because when suppose we use .map(parseInt) the parseInt function recieves two arguments for each element first the string to be converted and index of array element to be used as radix parameter in the above. This causes invalid parsing for non decimal bases. Solution may be to use correct way to map strings to numbers.....like .map( Number) etc...,0
L1QlVr686Bg,What actually prints to the console and why? Go!,5356,@KhanhPham-ix1pu,Did anyone else catch how parseInt behaves unexpectedly in TypeScript due to its base argument? Worth noting that this can lead to some tricky bugs. I wonder if using Number() instead of parseInt would help maintain the expected behavior. Thoughts?,0
L1QlVr686Bg,What actually prints to the console and why? Go!,5356,@danieljorgensen8979,You’re sending the wrong base to ParseInt 😉,2
L1QlVr686Bg,What actually prints to the console and why? Go!,5356,@abhishekdesai5355,"Well, parseInt Take 2nd argument as base value which we are passing as index of the number.
So, every ans would be base of 0, 1 2.",0
L1QlVr686Bg,What actually prints to the console and why? Go!,5356,@massnagaraju,Super❤❤❤,0
L1QlVr686Bg,What actually prints to the console and why? Go!,5356,@АлександрЕсин-л2щ,Hi Google's ❤🎉👋,0
L1QlVr686Bg,What actually prints to the console and why? Go!,5356,@akshayV701,"It supposed to work unfortunately it output 1, NaN, NaN .  Problem here it Passes index as radix to parse int.
Solution:
const results = [""1"", ""2"", ""3""].map(x => parseInt(x));",1
